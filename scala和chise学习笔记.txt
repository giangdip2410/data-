1 chisel代码 
class HiLoMultiplier() extends Module { 
  val io = new Bundle { 
    val A  = UInt(INPUT, 16) 
    val B  = UInt(INPUT, 16) 
    val Hi = UInt(OUTPUT, 16) 
    val Lo = UInt(OUTPUT, 16) 
  } 
  val mult = io.A * io.B 
  io.Lo := mult(15, 0) 
  io.Hi := mult(31, 16) 
}
 
 翻译成的verilog代码
 module HiLoMultiplier( 
    input [15:0] io_A, 
    input [15:0] io_B, 
    output[15:0] io_Hi, 
    output[15:0] io_Lo); 
 
  wire[15:0] T0; 
  wire[31:0] mult; // Chisel infers this to be 32 bits 
  wire[15:0] T1; 
 
  assign io_Lo = T0; //1）
  assign T0 = mult[4'hf:1'h0]; //2） 
  assign mult = io_A * io_B; //3)
  assign io_Hi = T1; //4)
  assign T1 = mult[5'h1f:5'h10]; //5)
endmodule
//注意1） 2） 3） 4） 5） 并行执行
 

 2 //2-bit FullAdder
    package examples

import chisel3._

class FullAdder extends Module {
  val io = IO(new Bundle {
    val a    = Input(UInt(1.W))
    val b    = Input(UInt(1.W))
    val cin  = Input(UInt(1.W))
    val sum  = Output(UInt(1.W))
    val cout = Output(UInt(1.W))
  })

  // Generate the sum
  val a_xor_b = io.a ^ io.b
  io.sum := a_xor_b ^ io.cin
  // Generate the carry
  val a_and_b = io.a & io.b
  val b_and_cin = io.b & io.cin
  val a_and_cin = io.a & io.cin
  io.cout := a_and_b | b_and_cin | a_and_cin
}



//4-bit Adder
package examples

import chisel3._
import chisel3.util._

//A 4-bit adder with carry in and carry out
class Adder4 extends Module {
  val io = IO(new Bundle {
    val A    = Input(UInt(4.W))
    val B    = Input(UInt(4.W))
    val Cin  = Input(UInt(1.W))
    val Sum  = Output(UInt(4.W))
    val Cout = Output(UInt(1.W))
  })
  //Adder for bit 0
  val Adder0 = Module(new FullAdder())
  Adder0.io.a := io.A(0)
  Adder0.io.b := io.B(0)
  Adder0.io.cin := io.Cin
  val s0 = Adder0.io.sum
  //Adder for bit 1
  val Adder1 = Module(new FullAdder())
  Adder1.io.a := io.A(1)
  Adder1.io.b := io.B(1)
  Adder1.io.cin := Adder0.io.cout
  val s1 = Cat(Adder1.io.sum, s0)
  //Adder for bit 2
  val Adder2 = Module(new FullAdder())
  Adder2.io.a := io.A(2)
  Adder2.io.b := io.B(2)
  Adder2.io.cin := Adder1.io.cout
  val s2 = Cat(Adder2.io.sum, s1)
  //Adder for bit 3
  val Adder3 = Module(new FullAdder())
  Adder3.io.a := io.A(3)
  Adder3.io.b := io.B(3)
  Adder3.io.cin := Adder2.io.cout
  io.Sum := Cat(Adder3.io.sum, s2).asUInt
  io.Cout := Adder3.io.cout
}


3 // returns random int in 0..lim-1 
val in0 = rnd.nextInt(lim)

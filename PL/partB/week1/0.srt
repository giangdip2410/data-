WEBVTT

1
00:00:00.012 --> 00:00:05.059
[MUSIC] This segment is the beginning of 
the first of a couple of sections and 

2
00:00:05.059 --> 00:00:09.620
we'll use the Racket language, 
so we need to start by getting used to a 

3
00:00:09.620 --> 00:00:12.838
new programming language and we'll do 
that here. 

4
00:00:12.838 --> 00:00:16.765
so we're going to use the Racket language 
instead of ML. 

5
00:00:16.765 --> 00:00:21.632
We're going to recommend the DrRacket 
programming environment instead of 

6
00:00:21.632 --> 00:00:25.247
another editor, so we won't use Emacs for 
this part of the course, 

7
00:00:25.247 --> 00:00:29.147
and we have installation and usage 
instructions on the course website. 

8
00:00:29.147 --> 00:00:33.577
I think you will find installation here 
very simple and straightforward, so just 

9
00:00:33.577 --> 00:00:37.542
do it when you have a few minutes. 
Like ML, Racket is a mostly functional 

10
00:00:37.542 --> 00:00:40.037
language, so a lot of what we've learned 
in ML, 

11
00:00:40.037 --> 00:00:44.097
we just get to see in a new setting. 
We'll still have anonymous functions, 

12
00:00:44.097 --> 00:00:48.809
we'll have first class function closures, 
everything is an expressions, so we need 

13
00:00:48.809 --> 00:00:53.120
things like return statements and so on. 
We're not going to use Racket with a form 

14
00:00:53.120 --> 00:00:56.229
of case expression, it does have support 
for some of that, 

15
00:00:56.229 --> 00:01:00.532
but were going to access our one of types 
in a different way and that will be fine 

16
00:01:00.532 --> 00:01:04.197
for our purposes. 
But there's two key differences from ML 

17
00:01:04.197 --> 00:01:08.377
that make me want to use Racket for this 
portion of the course. 

18
00:01:08.377 --> 00:01:12.487
The first, is that it does not rely so 
much on a static type system, 

19
00:01:12.487 --> 00:01:17.227
it accepts many more programs and that 
just delays what in ML would be a type 

20
00:01:17.227 --> 00:01:22.151
error until something occurs at run-time. 
So if you want to try to add a number and 

21
00:01:22.151 --> 00:01:27.140
a string it will be just fine until you 
actually get to that expression and then 

22
00:01:27.140 --> 00:01:31.136
you will get a run-time error. 
The other thing, as you'll see in future 

23
00:01:31.136 --> 00:01:35.256
segments when we start writing some real 
code, is that Racket has a very 

24
00:01:35.256 --> 00:01:38.780
minimalist syntax. 
It uses parentheses a lot to group things 

25
00:01:38.780 --> 00:01:43.383
rather than having strange syntax rules, 
like most other programming languages. 

26
00:01:43.383 --> 00:01:48.242
and it has many advanced features. 
we won't have time for most of them, but 

27
00:01:48.242 --> 00:01:52.312
I want to at least have some optional 
discussion of the module system if we 

28
00:01:52.312 --> 00:01:55.055
have time, 
I do want to discuss macros and so on. 

29
00:01:55.055 --> 00:01:59.534
Now overall, because of the similarities 
with ML, the next homework assignment is 

30
00:01:59.534 --> 00:02:02.267
not just going to be a get used to Racket 
assignment. 

31
00:02:02.267 --> 00:02:05.996
The first problem or two will be, but 
after that, I want to talk about some new 

32
00:02:05.996 --> 00:02:09.893
concepts, some new things that we could 
have done in ML, but worked out a little 

33
00:02:09.893 --> 00:02:13.130
more cleanly in Racket. 
So we'll have some segments to get used 

34
00:02:13.130 --> 00:02:16.616
to the Racket, the language, but then, 
we're going to move on, because the 

35
00:02:16.616 --> 00:02:20.905
course is not just about trying out the 
same thing in different languages, it's 

36
00:02:20.905 --> 00:02:25.562
about learning new concepts. 
I should mention that there's a related 

37
00:02:25.562 --> 00:02:30.787
programming language called Scheme. 
Racket essentially evolved out of Scheme 

38
00:02:30.787 --> 00:02:35.832
and was evolving for a while, and about 
2010, the designers of Racket decided to 

39
00:02:35.832 --> 00:02:40.158
stop using the Scheme name. 
so that they could be more different 

40
00:02:40.158 --> 00:02:43.004
without feeling bad about it, if you 
will. 

41
00:02:43.004 --> 00:02:47.968
I might occasionally slip up and say 
Scheme, because I'm still used to calling 

42
00:02:47.968 --> 00:02:51.894
languages like this, Scheme. 
I'll try not to but just don't be 

43
00:02:51.894 --> 00:02:55.433
confused if I do so. 
And, in case you have programmed in 

44
00:02:55.433 --> 00:03:00.036
Scheme, and it was a very popular 
language, particularly in introductory 

45
00:03:00.036 --> 00:03:04.576
programming languages, as well as for 
real use, Racket has made some 

46
00:03:04.576 --> 00:03:08.671
non-compatible changes. 
The most, the ones you're most likely to 

47
00:03:08.671 --> 00:03:13.512
notice are related to how lists are used, 
and in particular, that like ML list 

48
00:03:13.512 --> 00:03:17.551
elements are not mutable. 
Okay? So, if you've seen Scheme before, 

49
00:03:17.551 --> 00:03:21.282
you do need to get used to that. 
If not, we'll just introduce Racket as 

50
00:03:21.282 --> 00:03:23.835
its own wonderful modern programming 
language. 

51
00:03:23.835 --> 00:03:27.715
I should mention that, as a modern 
language, it's been used to build some 

52
00:03:27.715 --> 00:03:31.469
real systems and continues to do so to be 
used in that way. 

53
00:03:31.469 --> 00:03:36.098
it's also used a lot in education, which 
is probably what it's best known for. 

54
00:03:36.098 --> 00:03:40.566
the language does continue to evolve, so 
it can be a bit of a moving target. 

55
00:03:40.566 --> 00:03:45.232
I'm trying to keep everything up to date. 
It doesn't move that quickly and you can 

56
00:03:45.232 --> 00:03:50.096
always consult the online documentation 
in particular, the Racket guide is a free 

57
00:03:50.096 --> 00:03:54.625
user's guide that covers the important 
concepts of the language and has much 

58
00:03:54.625 --> 00:03:59.276
more than what we need in this course, 
but it's easy to look up things as you 

59
00:03:59.276 --> 00:04:02.033
need them. 
So, to get started, I'm going to show you 

60
00:04:02.033 --> 00:04:05.747
DrRacket here in just a second. 
It's going to have what it calls a 

61
00:04:05.747 --> 00:04:08.505
definitions window and an interactions 
window, 

62
00:04:08.505 --> 00:04:12.735
this will feel very familiar to us. 
in Emacs, we had the buffer where we 

63
00:04:12.735 --> 00:04:15.643
wrote the code, and the REPL where we ran 
the code. 

64
00:04:15.643 --> 00:04:20.541
DrRacket is going to work the same way. 
I think you'll find it more user-friendly 

65
00:04:20.541 --> 00:04:23.923
than how we used ML. 
and, you know, it will be fairly easy to 

66
00:04:23.923 --> 00:04:26.813
learn on your own, 
ask questions if you have them on the 

67
00:04:26.813 --> 00:04:31.221
discussion forum, and the lecture demos, 
of course, will show me using the tool. 

68
00:04:31.221 --> 00:04:34.150
And as I mentioned, there's wonderful 
documentation, 

69
00:04:34.150 --> 00:04:38.351
the general Racket website is where you 
download DrRacket and there's the Racket 

70
00:04:38.351 --> 00:04:42.821
Guide, there's many tutorials there's no 
shortage of information. Okay. 

71
00:04:42.821 --> 00:04:47.103
So why don't I flip over here now? 
So here is DrRacket and this is just the 

72
00:04:47.103 --> 00:04:51.776
current buffer I'm showing you is, is 
just a buffer where you can write code 

73
00:04:51.776 --> 00:04:55.409
and then, when I want to run it, I can 
just click this Run button here in the 

74
00:04:55.409 --> 00:05:00.077
upper right, and now, I get this split 
where I have a REPL below and the code up 

75
00:05:00.077 --> 00:05:02.595
above. 
You can flip between these, the Menu 

76
00:05:02.595 --> 00:05:05.453
options have options to show, show just 
one or the other. 

77
00:05:05.453 --> 00:05:10.364
I think control E-cycles between showing 
just the definitions and the definitions 

78
00:05:10.364 --> 00:05:13.587
and the REPL. 
So, I'm just hitting Contol-E to switch 

79
00:05:13.587 --> 00:05:17.125
back and forth here, 
and this is pretty much what DrRacket 

80
00:05:17.125 --> 00:05:21.657
will look like for you, except I've 
increased the font size and changed the 

81
00:05:21.657 --> 00:05:25.085
font, so that it looks a little better in 
the recordings. 

82
00:05:25.085 --> 00:05:29.751
So now let's look at the actual code. 
this brownish text that you see are 

83
00:05:29.751 --> 00:05:33.104
comments. 
Comments in Racket start with a semicolon 

84
00:05:33.104 --> 00:05:37.317
and go until the end of the line. 
There is support for multi-line comments. 

85
00:05:37.317 --> 00:05:41.440
I won't tend to use them much. 
this is fairly conventional to just have 

86
00:05:41.440 --> 00:05:45.292
each line of a comments start with 
semicolon and you can have comments on 

87
00:05:45.292 --> 00:05:48.346
the same line as other code, you just 
have to have it to the right. 

88
00:05:48.346 --> 00:05:51.670
So this here down at the bottom, this is 
another comment. 

89
00:05:51.670 --> 00:05:56.175
A couple bookkeeping things we're always 
going to do in our files. 

90
00:05:56.175 --> 00:06:01.414
The first is to always have the first 
non-comment line in your file be exactly 

91
00:06:01.414 --> 00:06:04.577
this. 
I'll type it again for you, although, you 

92
00:06:04.577 --> 00:06:10.422
should only have it once, #lang racket. 
Okay? that tells DrRacket that this is 

93
00:06:10.422 --> 00:06:14.343
Racket code in this file. 
DrRacket actually supports defining your 

94
00:06:14.343 --> 00:06:18.711
own languages, running code in lots of 
different languages, so we have to say 

95
00:06:18.711 --> 00:06:22.161
which language our code is and we say it 
with this first line. 

96
00:06:22.161 --> 00:06:26.740
This second line provided all-defined-out 
is a bit of a workaround to keep things 

97
00:06:26.740 --> 00:06:30.187
simple for us. 
By default in Racket, it has a module 

98
00:06:30.187 --> 00:06:35.602
system, just like we studied in ML, but 
in Racket's module system, each file is a 

99
00:06:35.602 --> 00:06:40.891
module, and by default, everything in it 
is private and you have to say what you 

100
00:06:40.891 --> 00:06:46.206
want to make available to other files. 
Using our methodology in this course of 

101
00:06:46.206 --> 00:06:50.831
putting our tests in a second file, 
that's a bit cumbersome, so this one line 

102
00:06:50.831 --> 00:06:55.089
which you can just copy or we'll give it 
to you for the homework assignments, says 

103
00:06:55.089 --> 00:06:58.164
change the default, 
make everything public, and that makes 

104
00:06:58.164 --> 00:07:01.918
your code much easier to test. 
So with those two things out of the way 

105
00:07:01.918 --> 00:07:06.120
you then, in the rest of your file just 
define a bunch of definitions, variables, 

106
00:07:06.120 --> 00:07:09.021
other things. And for this lecture, 
I've just done one, 

107
00:07:09.021 --> 00:07:13.329
we'll do a bunch more in the bunch more 
in the next segment, and I've defined the 

108
00:07:13.329 --> 00:07:16.406
variable s to be the string constant, 
hello. 

109
00:07:16.406 --> 00:07:22.169
So when you define a variable, it's open 
parentheses, keyword define, name of your 

110
00:07:22.169 --> 00:07:25.295
variable, string hello, close 
parenthesis. 

111
00:07:25.295 --> 00:07:30.122
So, this is like a val binding in ML. 
This would be like val s=hello. 

112
00:07:30.122 --> 00:07:34.714
And if I go to run this, when I click 
this on the REPL, it did run all the 

113
00:07:34.714 --> 00:07:37.497
codes. 
So it did create that definition for s, 

114
00:07:37.497 --> 00:07:40.478
unlike in ML, it doesn't tell us any 
information. 

115
00:07:40.478 --> 00:07:44.913
it just you know, it would give us an 
error if something didn't work, 

116
00:07:44.913 --> 00:07:48.381
but since everything did work, it just 
gives us our prompt. 

117
00:07:48.381 --> 00:07:50.982
And I could say here, I could add 2 and 
2, 

118
00:07:50.982 --> 00:07:54.395
and I would get back 4. 
That's how you do addition in Racket, 

119
00:07:54.395 --> 00:07:57.708
parenthesis, plus, the arguments, and 
another parenthesis. 

120
00:07:57.708 --> 00:08:01.047
I do have s, right? I get the string 
hello right there. 

121
00:08:01.047 --> 00:08:05.180
If I use a different variable, like t, I 
get an error message that I have a 

122
00:08:05.180 --> 00:08:09.622
reference to an unbound identifier. 
So that's just seeing DrRacket, we'll 

123
00:08:09.622 --> 00:08:13.449
continue to use it in the next few 
segments as we introduce the Racket 

124
00:08:13.449 --> 00:08:17.448
language, quickly covering a lot of the 
same ideas we already saw in ML. 

125
00:08:17.448 --> 00:08:21.569
And then after a few segments of that, 
we'll move onto new concepts and new 

126
00:08:21.569 --> 00:08:22.070
material. 
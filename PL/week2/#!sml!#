Standard ML of New Jersey v110.84 [built: Tue Sep 04 08:51:30 2018]
- use "hw1test/sml";
[opening hw1test/sml]
[use failed: Io: openIn failed on "hw1test/sml", Win32TextPrimIO:openRd: failed]
- use "hw1test.sml";
[opening hw1test.sml]
[opening homework1.sml]
[autoloading]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val it = () : unit
hw1test.sml:15.5-15.128 Error: operator and operand do not agree [tycon mismatch]
  operator domain: (int * int * int) list list * (int * int * int) list list
  operand:         (int * int * int) list list * 
                   ([int ty] * [int ty] * [int ty]) list
  in expression:
    dates_in_months
      ((<exp>,<exp>,<exp>) :: <exp> :: <exp>,2 :: <exp> :: <exp>) =
      (2012,2,28) :: (2011,3,31) :: (<exp>,<exp>,<exp>) :: nil
hw1test.sml:27.14-27.20 Error: unbound variable or constructor: oldest
val it = () : unit
- use "hw1test.sml";
[opening hw1test.sml]
[opening homework1.sml]
homework1.sml:45.5-47.57 Error: types of if branches do not agree [tycon mismatch]
  then branch: (int * int * int) list
  else branch: (int * int * int) list list
  in expression:
    if null (tl y)
    then dates_in_month (x,hd y)
    else dates_in_month (x,hd <exp>) :: dates_in_months (x,tl <exp>)
val it = () : unit
hw1test.sml:15.5-15.128 Error: operator and operand do not agree [tycon mismatch]
  operator domain: (int * int * int) list list * (int * int * int) list list
  operand:         (int * int * int) list list * 
                   ([int ty] * [int ty] * [int ty]) list
  in expression:
    dates_in_months
      ((<exp>,<exp>,<exp>) :: <exp> :: <exp>,2 :: <exp> :: <exp>) =
      (2012,2,28) :: (2011,3,31) :: (<exp>,<exp>,<exp>) :: nil
hw1test.sml:27.14-27.20 Error: unbound variable or constructor: oldest
val it = () : unit
- use "hw1test.sml";
[opening hw1test.sml]
[opening homework1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = false : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test9 = true : bool
val test10 = true : bool
val it = () : unit
- use "hw1test.sml";
[opening hw1test.sml]
[opening homework1.sml]
val is_older = fn : (int * int * int) * (int * int * int) -> bool
val number_in_month = fn : (int * int * int) list * int -> int
val number_in_months = fn : (int * int * int) list * int list -> int
val dates_in_month = fn
  : (int * int * int) list * int -> (int * int * int) list
val dates_in_months = fn
  : (int * int * int) list * int list -> (int * int * int) list
val get_nth = fn : string list * int -> string
val date_to_string = fn : int * int * int -> string
val number_before_reaching_sum = fn : int * int list -> int
val what_month = fn : int -> int
val month_range = fn : int * int -> int list
val it = () : unit
val test1 = true : bool
val test2 = true : bool
val test3 = true : bool
val test4 = true : bool
val test5 = false : bool
val test6 = true : bool
val test7 = true : bool
val test8 = true : bool
val test9 = true : bool
val test10 = true : bool
val it = () : unit
- 
WEBVTT

1
00:00:00.000 --> 00:00:04.940
[SOUND] 

2
00:00:04.940 --> 00:00:09.916
In this segment, which is optional, I 
want to continue our discussion of the 

3
00:00:09.916 --> 00:00:15.091
benefits of not being able to mutate, 
mutate data by showing you an example in 

4
00:00:15.091 --> 00:00:18.077
Java. 
So, as I said at the end of the previous 

5
00:00:18.077 --> 00:00:23.385
segment, in ML, we can create aliases and 
not worry about one of those aliases 

6
00:00:23.385 --> 00:00:26.520
causing an update, 
being used for an update that then 

7
00:00:26.520 --> 00:00:29.791
effects other aliases. 
But in languages like Java, we really 

8
00:00:29.791 --> 00:00:34.060
have to be careful about where we create 
aliases versus where we make copies. 

9
00:00:34.060 --> 00:00:39.302
So, the example that I have here I've 
simplified so it fits on the slide, but 

10
00:00:39.302 --> 00:00:43.746
this is the exact idea behind bugs that 
until they were fixed, caused real 

11
00:00:43.746 --> 00:00:47.770
security violations in real Java 
libraries, including things in the 

12
00:00:47.770 --> 00:00:51.613
standard Java library related to class 
loaders and other things. 

13
00:00:51.613 --> 00:00:56.057
So, let me walk through what I'm trying 
to capture, the, the basic idea here. 

14
00:00:56.057 --> 00:01:00.682
So, I have some resource, which I'll put 
in the field the resource, and I don't 

15
00:01:00.682 --> 00:01:04.585
want everyone to access this. 
I really want this to be private. So, 

16
00:01:04.585 --> 00:01:09.029
I've used this private field, it should 
be hidden, I'm not going to let anyone 

17
00:01:09.029 --> 00:01:11.836
use it, 
just anyone. But I want some people to be 

18
00:01:11.836 --> 00:01:16.143
able to access it, and so I'll have 
something reminiscent of say, passwords. 

19
00:01:16.143 --> 00:01:19.578
So, the allowed users will just be in 
this array of strings. 

20
00:01:19.578 --> 00:01:24.234
So, if someone is in that list, then they 
can use the resource and if not, if they 

21
00:01:24.234 --> 00:01:27.320
try to use the resource, I'm going to 
raise an exception. 

22
00:01:27.320 --> 00:01:31.420
Now, I'm happy to let everyone know who 
is allowed to use the resource. 

23
00:01:31.420 --> 00:01:34.701
That's not secret, just the contents of 
the resource are. 

24
00:01:34.701 --> 00:01:39.211
So, I have this method, get allowed 
users, that will return the string array. 

25
00:01:39.211 --> 00:01:43.605
So, you can see who the users are, you 
can even see if you're in the list so 

26
00:01:43.605 --> 00:01:47.593
you're allowed to use it. 
Could even find out the current user. 

27
00:01:47.593 --> 00:01:52.640
So, maybe when the code is executing, 
there's some notion of a current user. 

28
00:01:52.640 --> 00:01:57.960
So, that allows the, the main method 
here, if you will use the resource to do 

29
00:01:57.960 --> 00:02:01.643
the right thing. 
So, what it's going to do is for every 

30
00:02:01.643 --> 00:02:07.104
element of the allowed user's array, it's 
going to see if the current user is the 

31
00:02:07.104 --> 00:02:10.180
same string as in the i-th position of 
allowed users. 

32
00:02:10.180 --> 00:02:14.736
And so, if you find the current user in 
that array, then go ahead allow access 

33
00:02:14.736 --> 00:02:17.694
use the resource in whatever way your 
supposed to. 

34
00:02:17.694 --> 00:02:22.190
Otherwise, if this for loop actually 
finishes without returning here in this 

35
00:02:22.190 --> 00:02:24.671
if statement, then throw an exception, 
okay? 

36
00:02:24.671 --> 00:02:27.820
So, it turns out, this code probably 
makes sense to you. 

37
00:02:27.820 --> 00:02:32.601
I encourage you to figure out how it's in 
fact insecure and it would let any user 

38
00:02:32.601 --> 00:02:37.033
who's just a little bit clever to 
actually use the resource whether they're 

39
00:02:37.033 --> 00:02:40.356
supposed to or not. 
So I'm going to tell you the answer in a 

40
00:02:40.356 --> 00:02:42.455
few seconds. 
Click pause if you want. 

41
00:02:42.455 --> 00:02:47.587
And don't be too tough on yourself if you 
can't find the bug since a lot of other 

42
00:02:47.587 --> 00:02:51.901
people, including the people who have 
written code like this, have made the 

43
00:02:51.901 --> 00:02:56.020
same mistake. 
Okay? Ready? Here we go. 

44
00:02:57.640 --> 00:03:03.900
The get allowed users method returns an 
alias to the array, 

45
00:03:03.900 --> 00:03:09.262
right? So, all a malicious user has to do 
is call get aloud users to get an alias 

46
00:03:09.262 --> 00:03:14.494
to the array and then update one of the 
elements of the array, say position zero, 

47
00:03:14.494 --> 00:03:18.353
to be the current user. 
Then, if you call use the resource, I 

48
00:03:18.353 --> 00:03:23.520
guarantee that name will be in the array. 
So, clicking back here to the previous 

49
00:03:23.520 --> 00:03:26.790
slide, the error's in fact not in use the 
resource. 

50
00:03:26.790 --> 00:03:32.622
That's doing exactly the right thing. 
It's in get allowed users for leaking an 

51
00:03:32.622 --> 00:03:37.277
alias to the allowed users array. 
It's sort of is like, I assume that 

52
00:03:37.277 --> 00:03:41.309
clients were only going to read this 
result. And in a language that didn't 

53
00:03:41.309 --> 00:03:44.960
allow you to mutate array elements, that 
would be a fine assumption. 

54
00:03:44.960 --> 00:03:49.153
But java is not such a language. 
And so, clients can do something like 

55
00:03:49.153 --> 00:03:51.766
this. 
And then, they'd be able to access the 

56
00:03:51.766 --> 00:03:54.561
resource whether they were supposed to or 
not. 

57
00:03:54.561 --> 00:03:59.301
And so the fix which Java programmers 
have to remember to do, they get no help 

58
00:03:59.301 --> 00:04:04.224
from the language or the type system 
unless they use final in the right place 

59
00:04:04.224 --> 00:04:09.146
or try to use libraries that encapsulate 
this idea, is to change that get allowed 

60
00:04:09.146 --> 00:04:12.048
users method to return a copy of allowed 
users. 

61
00:04:12.048 --> 00:04:17.248
You have to copy the array so that what's 
given back to clients can no way update 

62
00:04:17.248 --> 00:04:22.132
the internal representation of our 
private resource object which then causes 

63
00:04:22.132 --> 00:04:26.952
use the resource to do the wrong thing. 
So, if that's tough to reason about, I 

64
00:04:26.952 --> 00:04:29.996
agree with you. 
I find the simplest way to avoid 

65
00:04:29.996 --> 00:04:34.499
reasoning about that, to get rid of 
mutation for most of the data in my 

66
00:04:34.499 --> 00:04:37.544
program. 
But if you prefer to have mutation, then 

67
00:04:37.544 --> 00:04:42.808
you get to be in the business of writing 
your program such that you have copies in 

68
00:04:42.808 --> 00:04:44.140
all the right places. 